import logging
import asyncio
from datetime import datetime
from typing import Dict, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
import os
import keep_alive

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7889278101:AAEYtujsGbLJ-A8zFtux3oNZV6H0bQoABNE"
ADMIN_GROUP_ID = --1002837608854  # ID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_USER_IDS = [521620770, 987654321]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class SupportStates(StatesGroup):
    waiting_for_question = State()
    active_ticket = State()


class SupportBot:
    def __init__(self):
        self.db_path = "support_tickets.db"
        self.active_tickets: Dict[int, dict] = {}
        self.channel_to_user: Dict[int, int] = {}
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS tickets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                channel_id INTEGER,
                channel_name TEXT,
                question TEXT,
                status TEXT DEFAULT 'open',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                closed_at TIMESTAMP
            )
        """)

        cursor.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                ticket_id INTEGER,
                from_user_id INTEGER,
                message_text TEXT,
                message_type TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (ticket_id) REFERENCES tickets (id)
            )
        """)

        conn.commit()
        conn.close()

    def save_ticket(self, user_id: int, username: str, first_name: str, last_name: str,
                    channel_id: int, channel_name: str, question: str) -> int:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO tickets (user_id, username, first_name, last_name, channel_id, channel_name, question)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (user_id, username, first_name, last_name, channel_id, channel_name, question))

        ticket_id = cursor.lastrowid
        conn.commit()
        conn.close()

        return ticket_id

    def save_message(self, ticket_id: int, from_user_id: int, message_text: str, message_type: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            INSERT INTO messages (ticket_id, from_user_id, message_text, message_type)
            VALUES (?, ?, ?, ?)
        """, (ticket_id, from_user_id, message_text, message_type))

        conn.commit()
        conn.close()

    def get_ticket_by_channel(self, channel_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ –ø–æ ID –∫–∞–Ω–∞–ª–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            SELECT id, user_id, username, first_name, last_name, channel_id, channel_name, question, status
            FROM tickets WHERE channel_id = ? AND status = 'open'
        """, (channel_id,))

        result = cursor.fetchone()
        conn.close()

        if result:
            return {
                'id': result[0],
                'user_id': result[1],
                'username': result[2],
                'first_name': result[3],
                'last_name': result[4],
                'channel_id': result[5],
                'channel_name': result[6],
                'question': result[7],
                'status': result[8]
            }
        return None

    def get_ticket_by_user(self, user_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            SELECT id, user_id, username, first_name, last_name, channel_id, channel_name, question, status
            FROM tickets WHERE user_id = ? AND status = 'open'
        """, (user_id,))

        result = cursor.fetchone()
        conn.close()

        if result:
            return {
                'id': result[0],
                'user_id': result[1],
                'username': result[2],
                'first_name': result[3],
                'last_name': result[4],
                'channel_id': result[5],
                'channel_name': result[6],
                'question': result[7],
                'status': result[8]
            }
        return None

    def close_ticket(self, ticket_id: int):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute("""
            UPDATE tickets SET status = 'closed', closed_at = CURRENT_TIMESTAMP
            WHERE id = ?
        """, (ticket_id,))

        conn.commit()
        conn.close()


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
support_bot = SupportBot()


@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )


@dp.message(Command("stats"))
async def admin_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if message.from_user.id not in ADMIN_USER_IDS:
        return

    conn = sqlite3.connect(support_bot.db_path)
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cursor.execute("SELECT COUNT(*) FROM tickets WHERE status = 'open'")
    open_tickets = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM tickets WHERE status = 'closed'")
    closed_tickets = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM tickets WHERE DATE(created_at) = DATE('now')")
    today_tickets = cursor.fetchone()[0]

    conn.close()

    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n" \
                 f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {open_tickets}\n" \
                 f"‚úÖ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {closed_tickets}\n" \
                 f"üìÖ –°–æ–∑–¥–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {today_tickets}"

    await message.answer(stats_text, parse_mode='HTML')


@dp.message(F.chat.type == "private")
async def handle_user_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ"""
    user = message.from_user
    message_text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_ticket = support_bot.get_ticket_by_user(user.id)

    if active_ticket:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        try:
            await bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                text=f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∏–∫–µ—Ç #{active_ticket['id']}):</b>\n"
                     f"üë§ {user.first_name or ''} {user.last_name or ''}"
                     f"{' (@' + user.username + ')' if user.username else ''}\n"
                     f"üÜî ID: {user.id}\n\n"
                     f"üìù {message_text}",
                parse_mode='HTML'
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            support_bot.save_message(active_ticket['id'], user.id, message_text, 'user_message')

            await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
        await create_new_ticket(message, message_text)


async def create_new_ticket(message: types.Message, question: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    user = message.from_user

    # –°–æ–∑–¥–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    channel_name = f"support_{user.id}_{timestamp}"

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(
            text="üìã –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
            callback_data=f"take_{user.id}"
        ))
        keyboard.add(InlineKeyboardButton(
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç",
            callback_data=f"close_{user.id}"
        ))
        keyboard.adjust(1)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.first_name or ''} {user.last_name or ''}"
        if user.username:
            user_info += f" (@{user.username})"
        user_info += f"\nüÜî <b>ID:</b> {user.id}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Ç–∏–∫–µ—Ç–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message = await bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=f"üé´ <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ #{timestamp}</b>\n\n"
                 f"{user_info}\n\n"
                 f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>\n{question}",
            parse_mode='HTML',
            reply_markup=keyboard.as_markup()
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        ticket_id = support_bot.save_ticket(
            user.id, user.username, user.first_name, user.last_name,
            ADMIN_GROUP_ID, channel_name, question
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –≤ –ø–∞–º—è—Ç–∏
        support_bot.active_tickets[ticket_id] = {
            'id': ticket_id,
            'user_id': user.id,
            'channel_id': ADMIN_GROUP_ID,
            'channel_name': channel_name,
            'admin_message_id': admin_message.message_id,
            'question': question
        }

        support_bot.channel_to_user[ADMIN_GROUP_ID] = user.id

        await message.answer(
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n"
            f"–ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: #{timestamp}\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@dp.message(F.chat.type.in_(["group", "supergroup"]))
async def handle_admin_response(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –≥—Ä—É–ø–ø–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if message.chat.id != ADMIN_GROUP_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if message.from_user.id not in ADMIN_USER_IDS:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        return

    # –ò—â–µ–º —Ç–∏–∫–µ—Ç –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    original_text = message.reply_to_message.text
    if not original_text:
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if "üÜî ID:" in original_text:
            user_id_line = [line for line in original_text.split('\n') if "üÜî ID:" in line][0]
            user_id = int(user_id_line.split("üÜî ID: ")[1])
        else:
            return

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
        ticket = support_bot.get_ticket_by_user(user_id)
        if not ticket:
            await message.reply("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç")
            return

        response_text = message.text

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=user_id,
            text=f"üë®‚Äçüíª <b>–û—Ç–≤–µ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{response_text}",
            parse_mode='HTML'
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        support_bot.save_message(ticket['id'], message.from_user.id, response_text, 'admin_response')

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")


@dp.callback_query(F.data.startswith("take_"))
async def handle_take_ticket(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑—è—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É"""
    user_id = int(callback.data.split("_")[1])

    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
    ticket = support_bot.get_ticket_by_user(user_id)

    if ticket:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=f"{callback.message.text}\n\n"
                 f"üë®‚Äçüíª <b>–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É:</b> {callback.from_user.first_name}",
            parse_mode='HTML'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            chat_id=user_id,
            text=f"üë®‚Äçüíª –í–∞—à –∑–∞–ø—Ä–æ—Å –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {callback.from_user.first_name}.\n"
                 "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."
        )

        await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É")
    else:
        await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@dp.callback_query(F.data.startswith("close_"))
async def handle_close_ticket(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞"""
    user_id = int(callback.data.split("_")[1])

    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
    ticket = support_bot.get_ticket_by_user(user_id)

    if ticket:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        support_bot.close_ticket(ticket['id'])

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
        if ticket['id'] in support_bot.active_tickets:
            del support_bot.active_tickets[ticket['id']]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text=f"{callback.message.text}\n\n"
                 f"‚ùå <b>–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç:</b> {callback.from_user.first_name}",
            parse_mode='HTML'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç.\n"
                 "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, "
                 "–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )

        await callback.answer("‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç")
    else:
        await callback.answer("‚ùå –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –∞–ø–¥–µ–π—Ç—ã
    await bot.delete_webhook(drop_pending_updates=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    keep_alive.keep_alive()
    asyncio.run(main())